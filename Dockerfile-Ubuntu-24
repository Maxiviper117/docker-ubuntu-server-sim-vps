#######################################################################
# Ubuntu 24.04 “noble” VPS–style image with OpenSSH *and* Docker-in-Docker
# (plus tini for proper PID 1 behaviour)
#######################################################################

FROM ubuntu:24.04

# ────────────────────────────────────────────────────────────────────
# 0. Non-interactive APT
# ────────────────────────────────────────────────────────────────────
ENV DEBIAN_FRONTEND=noninteractive

# Speed up apt
RUN cat > /etc/apt/apt.conf.d/99custom <<'EOF'
Acquire::http::Pipeline-Depth "0";
Acquire::http::No-Cache "true";
Acquire::BrokenProxy    "true";
EOF

# ────────────────────────────────────────────────────────────────────
# 1. Base packages
# ────────────────────────────────────────────────────────────────────
RUN apt-get update && apt-get install -y --no-install-recommends \
        openssh-server          \
        curl                    \
        ca-certificates         \
        gnupg                   \
        lsb-release             \
        apt-transport-https     \
        nano                    \
    && rm -rf /var/lib/apt/lists/*

# ────────────────────────────────────────────────────────────────────
# 2. Docker Engine + CLI (official repo, supports 24.04)
# ────────────────────────────────────────────────────────────────────
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    chmod a+r /etc/apt/keyrings/docker.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) \
        signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" \
        >/etc/apt/sources.list.d/docker.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        docker-ce               \
        docker-ce-cli           \
        containerd.io           \
        docker-buildx-plugin    \
        docker-compose-plugin   \
    && rm -rf /var/lib/apt/lists/*

# Put root in the docker group so `docker` works without sudo
RUN usermod -aG docker root

# ────────────────────────────────────────────────────────────────────
# 3. OpenSSH server hardening (key-only auth, root login allowed)
# ────────────────────────────────────────────────────────────────────
RUN mkdir -p /var/run/sshd && \
    sed -ri 's/^#?PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -ri 's/^#?PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config && \
    sed -ri 's/^#?PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config && \
    sed -ri 's@session[[:space:]]\+required[[:space:]]\+pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd

# (Optional) copy your public key into the image at build-time
# COPY id_rsa.pub /root/.ssh/authorized_keys

# ────────────────────────────────────────────────────────────────────
# 4. tini (PID 1) for clean signal handling
# ────────────────────────────────────────────────────────────────────
RUN apt-get update && apt-get install -y --no-install-recommends tini && \
    rm -rf /var/lib/apt/lists/*

# ────────────────────────────────────────────────────────────────────
# 5. Convenience startup helpers
# ────────────────────────────────────────────────────────────────────
# Start dockerd on TCP 2375 + the default Unix socket, then keep sshd in the foreground
RUN echo '#!/usr/bin/env bash\n\
set -e\n\
dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 &\n\
exec /usr/sbin/sshd -D -e' \
    > /start.sh && chmod +x /start.sh

# tini passes signals to /start.sh
ENTRYPOINT ["/usr/bin/tini", "--", "/start.sh"]

# ────────────────────────────────────────────────────────────────────
# 6. Exposed ports
# ────────────────────────────────────────────────────────────────────
EXPOSE 22 2375 80 443

# Build:
#   docker build -t ubuntu24-vps-simulate . -f Dockerfile-Ubuntu-24
#
# Run (example):
#   docker run -d --privileged -p 2222:22 -p 2375:2375 ubuntu24-vps-simulate
#
#######################################################################
